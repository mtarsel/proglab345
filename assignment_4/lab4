#lang racket

(define prefix?
  (lambda (ls1 ls2)
  (cond ((null? ls1) #t)
        ((null? ls2) #f)
        ((equal? (car ls1)(car ls2)) (prefix? (cdr ls1)(cdr ls2)))
                                     (else #f))))
;both work
(define exist?
  (lambda (element ls)
    (cond ((null? ls) #f)
          ((prefix? (list element) ls) #t)
          (else (exist? element (cdr ls))))))

(define exists?
  (lambda (element ls)
    (cond ((null? ls) #f)
          ((equal? element (car ls)) #t)
          (else (exist? element (cdr ls))))))
;example
(define reverse
  (lambda (ls)
    (cond ((null? ls) '())
          (else (append (reverse (cdr ls)) (list (car ls)))))))
;example
(define remove-duplicates2
  (lambda (ls)
    (reverse (remove-duplicates (reverse ls)))))

;example with remove dup 3
(define delete
 (lambda (item ls)
   (cond ((null? ls) '())
         ((equal? item (car ls)) (delete item (cdr ls)))
          (else (cons (car ls) (delete item (cdr ls)))))))

;example
(define remove-duplicates3
  (lambda (ls)
    (cond ((null? ls) '())
          (else (cons (car ls) (remove-duplicates3 (delete (car ls) (cdr ls))))))))

;#1 remove duplicates
(define remove-duplicates
  (lambda (ls)
   (cond ((null? ls) '())
         ((exists? (car ls) (cdr ls)) (remove-duplicates (cdr ls)))
         (else (cons (car ls) (remove-duplicates (cdr ls)))))))

;checks if list has distinct elements
(define set1?
  (lambda (ls)
    (cond ((null? ls) #t)
          ((exist?  (car ls) (cdr ls)) #f)
          (else (set1? (cdr ls))))))

(define set2?
 (lambda (ls)
   (equal? (remove-duplicates ls) ls)))
;or (equal? ls (remove-duplicates ls))))

(define accumulate
  (lambda (op base term ls)
    (if (null? ls)
        base
        (op (term (car ls)) 
            (accumulate op base term (cdr ls))))))

(define append
  (lambda (ls1 ls2)
    (accumulate cons ls2  (lambda(x) x) ls1)))

;example
(define all-same?
  (lambda (ls)
    (cond ((null? ls) #t)
          (else (equal? (remove-duplicates ls) (list (car ls)))))))

(define union1
  (lambda (set1 set2)
    (remove-duplicates (append set1 set2))))

(define union2
  (lambda (set1 set2)
    (cond ((null? set1) set2)
          ((null? set2) set1)
          (else(remove-duplicates (append (list(car set2)) (union2 set1 (cdr set2))))))))

(define union3
  (lambda (set1 set2)
    (remove-duplicates(accumulate cons set1 (lambda(x) x) set2))))

(define union4
  (lambda (set1 set2)
    (cond ((null? set1) set2)
          ((exists? (car set1) set2) (union1 (cdr set1) set2))
          (else (cons (car set1) (union1 (cdr set1) set2))))))

;DONT USE CONS TO COMBINE LIST, USE APPEND
(define union5
  (lambda (set1 set2)
    (accumulate cons;wrong combiner. cons deals with an item and a list, we could get a list and a list
                set2
                (lambda (x) (if (exists? x set2) '() (list x)));x stands for every element in set1
                set1)))

(define subset?
  (lambda (set1 set2)
    (equal? (union1 set1 set2) set2)))

(define subset2?
  (lambda (set1 set2)
    (cond ((null? set1) #t)
          ((exists? (car set1) set2) (subset? (cdr set1) set2))
          (else #f))))

(define subset3?
  (lambda (set1 set2)
    (accumulate (lambda (a b) (and a b))
                #t
                (lambda (x) (exists? x set2))
                set1)))
  
    