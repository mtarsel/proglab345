#lang racket

; length: returns the length of the list

(define accumulate
  (lambda (op base term ls)
    (if (null? ls)
        base
        (op (term (car ls)) 
            (accumulate op base term (cdr ls))))))

(define length
  (lambda (ls)
         (accumulate + 0 (lambda(x) 1 ) ls)))

(define append
  (lambda (ls1 ls2)
    (accumulate cons ls2  (lambda(x) x) ls1)))

(define reverse 
         (lambda (ls)
         (if (null? ls) 
             '()
              (append (reverse (cdr ls)) 
                      (cons (car ls) '() )))))       
        
   
(define prefix?
  (lambda (ls1 ls2)
  (cond ((null? ls1) #t)
        ((null? ls2) #f)
        ((equal? (car ls1)(car ls2))(prefix? (cdr ls1)(cdr ls2)))
                                     (else #f))))

(define subsequence?
  (lambda (ls1 ls2)
  (cond ((null? ls1) #t)
        ((null? ls2) #f)
        ((prefix? ls1 ls2) #t)
        ((subsequence? ls1 (cdr ls2)))
                                     (else #f))))


(define sublist?
  (lambda (ls1 ls2)
  (cond ((null? ls1) #t)
        ((null? ls2) #f)
        ((subsequence? (cons (car ls1) '()) ls2) (sublist?(cdr ls1) ls2))
        (else #f))))
  
(define map
  (lambda (f ls)
    (if (null? ls)
         '()
         (cons (f (car ls))
               (map f (cdr ls))))))
   
(define filter
  (lambda ( test? ls)
    (cond ((null? ls) '())
        ((test? (car ls)) (cons (car ls) (filter test? (cdr ls))))
        (else (filter test? (cdr ls))))))
    

(define my-insert
  (lambda (item sorted_ls)
    (cond ((null? sorted_ls) (list item))
          ((> item (car sorted_ls)) (cons (car sorted_ls) (my-insert item (cdr sorted_ls))))
           (else (cons item sorted_ls)))))

    
(define num-sort
  (lambda (ls)
    (if (null? ls)
        '()
        (my-insert (car ls)
                (num-sort (cdr ls))))))
(define sort
  (lambda (ls less?)


;(define make-sort
;  (lambda (less?)
;          [FILL IN BLANKS]
   