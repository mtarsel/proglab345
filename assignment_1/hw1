#lang racket

(define who
  (lambda ()
    (whos-on-first-loop '())))

(define whos-on-first-loop 
	  (lambda (old-context)
	    (let ((costellos-line (read)));read input from keyboard. assigns input to costellos-line
	      (let ((new-context (get-context costellos-line old-context)));ignore the context
	        (let ((strong-reply (try-strong-cues costellos-line)));gets input sentence from user and figures out if there is an immediate reply
	          (let ((weak-reply (try-weak-cues costellos-line new-context))) ;ignore
	               (cond ((not (null? strong-reply));do we have a strong reply?
	                      (writeln strong-reply)
	                      (whos-on-first-loop (get-context strong-reply new-context)))
	                     ((not (null? weak-reply))
	                      (writeln weak-reply)
			      (whos-on-first-loop (get-context weak-reply new-context)))
	                     ((wants-to-end? costellos-line)
	                      (wrap-it-up))
	                     (else 
	                      (writeln (hedge));hedge=stall
	                      (whos-on-first-loop new-context)))))))))

(define *strong-cues*;prints this list 
  '( ( ((the names) (their names))
       ((who's on first whats on second i dont know on third)
        (whats on second whos on first i dont know on third)) )

     ( ((suppose) (lets say) (assume))
       ((okay) (why not) (sure) (it could happen)) )

     ( ((i dont know))
       ((third base) (hes on third)) )
   ))
        
(define *weak-cues*
  '( ( ((who) (whos) (who is))
       ((first-base)
           ((thats right) (exactly) (you got it)
	    (right on) (now youve got it)))
       ((second-base third-base)
           ((no whos on first) (whos on first) (first base))) )
     ( ((what) (whats) (what is));(_whats the name)
       ((second-base)
	   ((right) (sure) (you got it right)))
       ((first-base third-base)
	   ((hes on second) (i told you whats on second)))
        )
     ( ((whats the name))
             ((second-base)
	((now youre talking) (you got it)))
       ((first-base third-base)
	   ((no whats the name of the guy on second)
	    (whats the name of the second baseman)))
 )
   ))

(define try-strong-cues;TODO shit is pritin out the entire sublist from strong cue
  (lambda (sentence)
    (define helper
      (lambda (list-of-pairs)
        (cond ((null? list-of-pairs) '())
              ((any-good-fragments? (cue-part list-of-pairs) sentence))
              (select-any-from-list (response-part (car list-of-pairs)))
              (else (helper (cdr list-of-pairs))))))
    (helper *strong-cues*)))


(define try-weak-cues
  (lambda (sentence context)
    (define helper
      (lambda (context-list)
        (cond ((null? context-list) '())
              ((any-good-fragments? (cue-part (car context-list)) sentence) 
               (cond ((equal? context (car (caadar context-list))) (select-any-from-list (car (cdadar context-list))))
                     ((equal? context (caar (caddar context-list))) (select-any-from-list (cadr (caddar context-list))))
                     ((equal? context (cdar (caddar context-list))) (select-any-from-list (cadr (caddar context-list))))
                     (else '())))
              ((any-good-fragments? (caadr context-list) sentence) 
               (cond ((equal? context (caar (cadadr context-list))) (select-any-from-list (cadr (cadadr context-list))))
                     ((equal? context (caaar (cddadr context-list))) (select-any-from-list (cadar (cddadr context-list))))
                     ((equal? context (cdaar (cddadr context-list))) (select-any-from-list (cadar (cddadr context-list))))
                     (else '())))
              ((any-good-fragments? (caaddr context-list) sentence) 
               (cond ((equal? context (caaar (cdaddr context-list))) (select-any-from-list (cadar (cdaddr context-list))))
                     ((equal? context (caaadr (cdaddr context-list))) (select-any-from-list (cadadr (cdaddr context-list))))
                     ((equal? context (car (cdaadr (cdaddr context-list)))) (select-any-from-list (cadadr (cdaddr context-list))))
                     (else '())))
              (else '()))))
     (helper *weak-cues*)))
;also i changed in *weak-cues* where it says (whats the name) i changed it to (_whats the name)
                    
              

(define cue-part
  (lambda (pair)
    (car pair)))

(define response-part
  (lambda (pair)
    (cadr pair)))

(define any-good-fragments?
  (lambda (list-of-cues sentence)
    (cond ((null? list-of-cues) #f)
          ((subsequence? (car list-of-cues) sentence) #t)
          (else (any-good-fragments? (cdr list-of-cues) sentence)))))

(define prefix?
  (lambda (ls1 ls2)
  (cond ((null? ls1) #t)
        ((null? ls2) #f)
        ((equal? (car ls1)(car ls2)) (prefix? (cdr ls1)(cdr ls2)))
                                     (else #f))))

(define subsequence?
  (lambda (ls1 ls2)
  (cond ((null? ls1) #t)
        ((null? ls2) #f)
        ((prefix? ls1 ls2) #t)
        ( else (subsequence? ls1 (cdr ls2))))))

(define wants-to-end?
  (lambda (sentence)
    (equal? sentence '(i quit))))

(define wrap-it-up
  (lambda (sentence)
    (equal? sentence '(i quit))))

(define *hedges*
  '((its like im telling you)
    (now calm down)
    (take it easy)
    (its elementary lou)
    (im trying to tell you)
    (but you asked)))

(define select-any-from-list
  (lambda (ls)
    (list-ref ls (random (length ls)))))

(define hedge
  (lambda ()
    (select-any-from-list *hedges*)))

(define *context-words*
  `( ( ((first)) first-base )
     ( ((second)) second-base )
     ( ((third)) third-base )))

(define get-context
  (lambda (sentence context)
    (define helper
      (lambda (list-of-pairs)
        (cond ((null? list-of-pairs) context)
              ((any-good-fragments? (cue-part(car list-of-pairs)) sentence)
               (response-part (car list-of-pairs)))
              (else (helper(cdr list-of-pairs))))))
    (helper *context-words*)))
        

(define context-part
  (lambda (pair)
    (cadr pair)))
	
(define writeln
  (lambda (sentence)
    (write sentence)))