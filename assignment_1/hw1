#lang racket

(define whos-on-first-loop 
	  (lambda (old-context)
	    (let ((costellos-line (read)));read input from keyboard. assigns input to costellos-line
	      (let ((new-context (get-context costellos-line old-context)));ignore the context
	        (let ((strong-reply (try-strong-cues costellos-line)));gets input sentence from user and figures out if there is an immediate reply
	          (let ((weak-reply (try-weak-cues costellos-line new-context))) ;ignore
	               (cond ((not (null? strong-reply));do we have a strong reply?
	                      (writeln strong-reply)
	                      (whos-on-first-loop (get-context strong-reply new-context)))
	                     ((not (null? weak-reply))
	                      (writeln weak-reply)
			      (whos-on-first-loop (get-context weak-reply new-context)))
	                     ((wants-to-end? costellos-line)
	                      (wrap-it-up))
	                     (else 
	                      (writeln (hedge));hedge=stall
	                      (whos-on-first-loop new-context)))))))))

	(define *strong-cues*
	  '( ( ((the names) (their names))
	       ((who's on first whats on second i dont know on third)
 	        (whats on second whos on first i dont know on third)) )

	     ( ((suppose) (lets say) (assume))
	       ((okay) (why not) (sure) (it could happen)) )

	     ( ((i dont know))
	       ((third base) (hes on third)) )
	   ))



(define try-strong-cues
  (lambda (sentence)
    '()))

(define try-weak-cues
  (lambda (sentence)
    '()))

(define wants-to-end?
  (lambda (sentence)
    (equal? sentence '(i quit))))

(define wrap-it-up
  (lambda (sentence)
    (equal? sentence '(i quit))))

(define *hedges*
  '((its like im telling you)
    (now calm down)
    (take it easy)
    (its elementary lou)
    (im trying to tell you)
    (but you asked)))

(define select-any-from-list
  (lambda (ls)
    (list-ref ls (random (length ls)))))

(define hedge
  (lambda ()
    (select-any-from-list *hedges*)))

(define get-context
  (lambda (sentence old-context)
    '()))
	
(define writeln
  (lambda (sentence)
    (write sentence)))